<?php
/**
 * Caridea
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * @copyright 2015-2018 LibreWorks contributors
 * @license   Apache-2.0
 */
namespace Caridea\Container;

/**
 * Generated by hand.
 */
class EmptyContainerTest extends \PHPUnit\Framework\TestCase
{
    /**
     * @var EmptyContainer
     */
    protected $object;

    /**
     * Sets up the fixture.
     */
    protected function setUp()
    {
        $this->object = new EmptyContainer();
    }

    /**
     * @covers Caridea\Container\EmptyContainer::contains
     */
    public function testContains()
    {
        $this->assertFalse($this->object->contains('notThere'));
    }

    /**
     * @covers Caridea\Container\EmptyContainer::containsType
     */
    public function testContainsType()
    {
        $this->assertFalse($this->object->containsType(''));
    }

    /**
     * @covers Caridea\Container\EmptyContainer::get
     * @expectedException \Caridea\Container\Exception\Missing
     * @expectedExceptionMessage No container entry found for key: notThere
     */
    public function testGet()
    {
        $this->assertNull($this->object->get('notThere'));
    }

    /**
     * @covers Caridea\Container\EmptyContainer::getByType
     */
    public function testGetByType()
    {
        $this->assertEquals([], $this->object->getByType(''));
    }

    /**
     * @covers Caridea\Container\EmptyContainer::getFirst
     */
    public function testGetFirst()
    {
        $this->assertNull($this->object->getFirst(''));
    }

    /**
     * @covers Caridea\Container\EmptyContainer::getNames
     */
    public function testGetNames()
    {
        $this->assertEquals([], $this->object->getNames());
    }

    /**
     * @covers Caridea\Container\EmptyContainer::getParent
     */
    public function testGetParent()
    {
        $this->assertNull($this->object->getParent());
    }

    /**
     * @covers Caridea\Container\EmptyContainer::getType
     */
    public function testGetType()
    {
        $this->assertNull($this->object->getType('notThere'));
    }

    /**
     * @covers Caridea\Container\EmptyContainer::named
     * @expectedException \UnexpectedValueException
     * @expectedExceptionMessage A SplObjectStorage was requested, but null was found
     */
    public function testNamedBad()
    {
        $this->object->named('myQueue', \SplObjectStorage::class);
    }
}
