<?php
/**
 * Caridea
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * @copyright 2015 LibreWorks contributors
 * @license   http://opensource.org/licenses/Apache-2.0 Apache 2.0 License
 */
namespace Caridea\Container;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-18 at 14:13:52.
 */
class ProviderTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @covers Caridea\Container\Provider::get
     * @covers Caridea\Container\Provider::__construct
     * @covers Caridea\Container\Provider::isSingleton
     * @covers Caridea\Container\Provider::getType
     */
    public function testSingleton()
    {
        $type = 'ArrayObject';
        $object = new Provider($type, function ($c) {
            return new \ArrayObject([1, 2, 3]);
        }, true);
        $stub = $this->getMockBuilder(Container::class)
                        ->getMock();
        $this->assertSame($type, $object->getType());
        $this->assertTrue($object->isSingleton());
        $instance = $object->get($stub);
        $this->assertInstanceOf('\ArrayObject', $instance);
        $this->assertSame($instance, $object->get($stub));
    }

    /**
     * @covers Caridea\Container\Provider::get
     * @covers Caridea\Container\Provider::__construct
     * @covers Caridea\Container\Provider::isSingleton
     * @covers Caridea\Container\Provider::getType
     */
    public function testPrototype()
    {
        $type = 'ArrayObject';
        $object = new Provider($type, function ($c) {
            return new \ArrayObject([1, 2, 3]);
        }, false);
        $stub = $this->getMockBuilder(Container::class)
                        ->getMock();
        $this->assertSame($type, $object->getType());
        $this->assertFalse($object->isSingleton());
        $instance = $object->get($stub);
        $this->assertInstanceOf('\ArrayObject', $instance);
        $this->assertNotSame($instance, $object->get($stub));
    }
    
    /**
     * @covers Caridea\Container\Provider::__construct
     * @covers Caridea\Container\Provider::getType
     */
    public function testInterface()
    {
        $type = 'ArrayAccess';
        $object = new Provider($type, function($c) {
            return new \ArrayObject([1, 2, 3]);
        }, true);
        $stub = $this->getMockBuilder(Container::class)
                        ->getMock();
        $this->assertSame($type, $object->getType());
        $instance = $object->get($stub);
        $this->assertInstanceOf('\ArrayAccess', $instance);
    }
    
    /**
     * @expectedException \InvalidArgumentException
     * @expectedExceptionMessage "factory" parameter must be a Closure or an object with an __invoke method
     */
    public function testConstructor1()
    {
        new Provider('SplObjectStorage', new \ArrayObject());
    }
    
    /**
     * @expectedException \InvalidArgumentException
     * @expectedExceptionMessage "factory" parameter must be a Closure or an object with an __invoke method
     */
    public function testConstructor2()
    {
        new Provider('SplObjectStorage', null);
    }
    
    /**
     * @expectedException \InvalidArgumentException
     * @expectedExceptionMessage Unknown class or interface: 'Caridea\Container\Foo'
     */
    public function testConstructor3()
    {
        $p = new Provider('Caridea\\Container\\Foo', function ($c) {
        });
    }
}
