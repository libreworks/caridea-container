<?php
/**
 * Caridea
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 * 
 * @copyright 2015 LibreWorks contributors
 * @license   http://opensource.org/licenses/Apache-2.0 Apache 2.0 License
 */
namespace Caridea\Container;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-18 at 14:33:07.
 */
class AbstractContainerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var AbstractContainer
     */
    protected $object;
    
    /**
     * @var Container
     */
    protected $parent;
    
    protected $instance;

    /**
     * Sets up the fixture.
     */
    protected function setUp()
    {
        $instance = new \SplQueue();
        $this->parent = new OneInstanceContainer('config.var', 'foobar');
        $this->object = new OneInstanceContainer('myQueue', $instance, $this->parent);
        $this->instance = $instance;
    }

    /**
     * @covers Caridea\Container\AbstractContainer::contains
     */
    public function testContains()
    {
        $this->assertTrue($this->object->contains('myQueue'));
        $this->assertTrue($this->object->contains('config.var'));
        $this->assertFalse($this->object->contains('notThere'));
    }

    /**
     * @covers Caridea\Container\AbstractContainer::containsType
     */
    public function testContainsType()
    {
        $this->assertFalse($this->object->containsType(null));
        $this->assertTrue($this->object->containsType('SplQueue'));
        $this->assertTrue($this->object->containsType('string'));
        $this->assertFalse($this->object->containsType('SplObjectStorage'));
    }

    /**
     * @covers Caridea\Container\AbstractContainer::get
     */
    public function testGet()
    {
        $this->assertSame($this->instance, $this->object->get('myQueue'));
        $this->assertSame('foobar', $this->object->get('config.var'));
        $this->assertNull($this->object->get('notThere'));
    }

    /**
     * @covers Caridea\Container\AbstractContainer::getByType
     */
    public function testGetByType()
    {
        $this->assertEquals(['myQueue' => $this->instance], $this->object->getByType('SplQueue'));
        $this->assertEquals(['config.var' => 'foobar'], $this->object->getByType('string'));
        $this->assertEquals([], $this->object->getByType('SplObjectStorage'));
        $this->assertEquals([], $this->object->getByType(null));
    }

    /**
     * @covers Caridea\Container\AbstractContainer::getNames
     */
    public function testGetNames()
    {
        $this->assertEquals(['myQueue'], $this->object->getNames());
    }

    /**
     * @covers Caridea\Container\AbstractContainer::getParent
     */
    public function testGetParent()
    {
        $this->assertSame($this->parent, $this->object->getParent());
        $this->assertNull($this->parent->getParent());
    }

    /**
     * @covers Caridea\Container\AbstractContainer::getType
     */
    public function testGetType()
    {
        $this->assertEquals('SplQueue', $this->object->getType('myQueue'));
        $this->assertEquals('string', $this->object->getType('config.var'));
        $this->assertNull($this->object->getType('notThere'));
    }
}

class OneInstanceContainer extends \Caridea\Container\AbstractContainer
{
    private $instance;
    
    public function __construct($name, $instance, $parent = null)
    {
        $this->instance = $instance;
        $type = gettype($instance);
        parent::__construct([$name => $type == 'object' ? get_class($instance) : $type], $parent);
    }
    
    protected function doGet($name)
    {
        return $this->instance;
    }
}